---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app coredns
  namespace: network-system
spec:
  interval: 5m
  timeout: 10m
  releaseName: coredns
  chart:
    spec:
      chart: coredns
      version: 1.39.1
      sourceRef:
        kind: HelmRepository
        name: coredns-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: cilium
      namespace: kube-system
  install:
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace
  test:
    enable: true
  rollback:
    recreate: true
    force: true
    cleanupOnFail: true
  uninstall:
    keepHistory: false
  driftDetection:
    mode: enabled
  maxHistory: 3
  values:
    # Resources allocated based on Robusta KRR output
    resources:
      limits:
        memory: 128Mi
      requests:
        cpu: 24m
        memory: 128Mi
    # Custom image bundled with external plugins; currently not in use.
    # This image is reusable and can be viewed with the available plugins here https://github.com/xUnholy/coredns
    # image:
    #   repository: xunholy/coredns
    #   tag: '1.8.0-rc.7'
    #   pullPolicy: Always
    rbac:
      create: true
    replicaCount: 1
    # In this mode CoreDNS is deployed as any kubernetes app in user specified namespace.
    # The CoreDNS service can be exposed outside the cluster by using using either the NodePort or LoadBalancer type of service.
    # This mode is chosen by setting isClusterService to false
    isClusterService: false
    serviceType: LoadBalancer
    service:
      annotations:
        io.cilium/lb-ipam-ips: ${CLUSTER_LB_COREDNS}
      externalTrafficPolicy: Cluster
    # https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/#coredns-configmap-options
    servers:
      - zones:
          - zone: .
            scheme: dns://
          - zone: raspbernetes.com.
            scheme: dns://
        port: 53
        plugins:
          - name: log
          - name: errors
          # Serves a /health endpoint on :8080, required for livenessProbe
          - name: health
            configBlock: |-
              lameduck 5s
          # Serves a /ready endpoint on :8181, required for readinessProbe
          - name: ready
          # Required to query kubernetes API for data
          - name: kubernetes
            parameters: cluster.local in-addr.arpa ip6.arpa
            configBlock: |-
              pods insecure
              fallthrough in-addr.arpa ip6.arpa
              ttl 30
          # Serves a /metrics endpoint on :9153, required for serviceMonitor
          - name: prometheus
            parameters: 0.0.0.0:9153
          # Forward everything else to Cloudflare DNS
          # Note: plugin/forward: this plugin can only be used once per Server Block
          - name: forward
            parameters: . 1.1.1.1
            configBlock: |-
              except raspbernetes.com *.raspbernetes.com
          - name: file
            parameters: /etc/coredns/raspbernetes.db raspbernetes.com
          # Set up cache
          - name: cache
            parameters: 30
          # Detects simple forwarding loops and halts the CoreDNS process if a loop is found.
          - name: loop
          # Allows automatic reload of a changed Corefile.
          - name: reload
          # The loadbalance will act as a round-robin DNS load balancer by randomizing the order of A, AAAA, and MX records in the answer.
          - name: loadbalance
        prometheus:
          # Set this to true to create Service for Prometheus metrics
          service:
            enabled: true
          # Disabled due to service monitor resources being created statically to remove chart dependencies.
          monitor:
            enabled: false
    # configure custom zone files as per https://coredns.io/2017/05/08/custom-dns-entries-for-kubernetes/
    # api.raspbernetes.com - https://www.talos.dev/v1.7/introduction/prodnotes/#dns-records
    zoneFiles:
      - filename: raspbernetes.db
        domain: raspbernetes.com
        contents: |
          ${CLUSTER_DOMAIN}.        IN SOA    ns.dns.raspbernetes.com. hostmaster.raspbernetes.com. 1610541154 7200 1800 86400 30
          ${CLUSTER_DOMAIN}.        IN NS     ns.dns.raspbernetes.com.
          ${CLUSTER_DOMAIN}.        IN A      ${CLUSTER_LB_ISTIO_INGRESS_GATEWAY}
          et.${CLUSTER_DOMAIN}.     IN A      ${CLUSTER_LB_NGINX_INGRESS_GATEWAY}
          api.${CLUSTER_DOMAIN}.    IN A      192.168.50.111
          api.${CLUSTER_DOMAIN}.    IN A      192.168.50.112
          api.${CLUSTER_DOMAIN}.    IN A      192.168.50.113
          *.${CLUSTER_DOMAIN}.      IN CNAME  ${CLUSTER_DOMAIN}.
          plex.${CLUSTER_DOMAIN}.   IN A      ${EXT_NAS_IP}
